#include <Arduino.h>
// #include <SPIFlash.h>
#include <SerialFlash.h>
#include <SPI.h>

#define fileSize 128000   // Two 64-byte sectors for erasing efficiently
// 128 kB gives about seven hours of observations if:
// >> 50 observations are taken per run
// >> 50Hz observation rate
// >> 1 observation run per minute

#define threshold 100   //will be bin number from ADC

// Define pin loctions of flash chips and ADC
#define FLASH_CHIP_SELECT1 8   // Chip select pin number for flash chip #1 (PCB U$16)
#define FLASH_CHIP_SELECT2 9   // Chip select pin number for flash chip #2 (PCB U$17)
#define ADC_CHIP_SELECT 10     // Chip select pin number for ADC (PCB U$12)

SerialFlashFile file;
SerialFlashChip SerialFlash1;
SerialFlashChip SerialFlash2;

// char *nameList;
  

/*uint16_t getADC(){
  uint16_t photodiode16;
  SPI.beginTransaction(SPISettings(50,MSBFIRST,SPI_MODE3)); //SPISettings(maxSpeed,dataOrder,dataMode)
  digitalWrite(ADC_CHIP_SELECT,LOW); // set Slave Select pin 10 to low to select chip
  photodiode16 = SPI.transfer16(0x00);
  digitalWrite(ADC_CHIP_SELECT,HIGH); // set Slave Select pin 10 to high to de-select chip
  SPI.endTransaction();
  return photodiode16;
}
*/
 
 /*
char * getFileNames(int flashChipSelect) {
  if (!SerialFlash.begin(flashChipSelect)) {
    Serial.print("Unable to access SPI Flash chip 1");
  } // SerialFlash2.begin(FLASH_CHIP_SELECT2);
   
  SerialFlash.opendir();
  int i = 0; // Name list index variable
  while (1) { 
    char filename[64];
    uint32_t filesize;

    if (SerialFlash.readdir(filename, sizeof(filename), filesize)) {
      Serial.print("  ");
      Serial.print(filename);
      nameList[i] = *filename;
      i++;
      //spaces(20 - strlen(filename));
      Serial.print("  ");
      Serial.print(filesize);
      Serial.print(" bytes");
      Serial.println();
    } else {
      break; // no more files
    }
  }
  return nameList;
}
*/
void setup() {
  //pin 8 for Slave Select    //connected to pin 1 of flash mem 1 - output from master
  //pin 9 for Slave Select    //connected to pin 1 of flash mem 2 - output from master
  pinMode(10, OUTPUT);   //pin 10 for Slave Select    //connected to pin 3 on ADC (ADC_CS) - input to master
  //pin 11 for Master Output Slave Input (MOSI) - sends data to flash memory
  //pin 12 for Master Input Slave Output (MISO) - receives data from ADC //connects to pin 6 on ADC
  //pin 13 for Serial Clock (SCK) - output from master //connects to pin 5 on ADC
  Serial.begin(9600);
  delay(5000);
  Serial.println("Serial Printing Begin:");
  Serial.println("");
  SerialFlash.createErasable("Test.bin", fileSize);
  SerialFlash.createErasable("Test2.bin", fileSize);
  SerialFlash.createErasable("Test3", fileSize);
  file = SerialFlash.open("Test2.bin");   //checks to see if file can open or not

  Serial.println("Hit getFileNames");
  //char filenames = *getFileNames(FLASH_CHIP_SELECT1);
  //Serial.print(&filenames);
  delay(500);

  if (!file) {
    //Error flash file open
    Serial.println("Didn't work");
  }
  boolean dataCapture = true; //setting condition to continue taking data until threshold is reached
  uint16_t val16 = 0;

  while (dataCapture){ //will run until dataCapture is false
    //uint16_t val16 = getADC();
    val16++;

    // Serial.println(val16);
    uint32_t timeStamp = millis();
     //write 16-bit (2 byte) binary photodiode voltage to file
    if (!file.write(&timeStamp, 4)){ //if photodiode voltage is less than or equal to threshold then set dataCapture to false (ends while loop)
      dataCapture = false;
    }

    if (!file.write(&val16, 2)){ //if photodiode voltage is less than or equal to threshold then set dataCapture to false (ends while loop)
      dataCapture = false;
    }
  }

  Serial.println("DataCapture while loop ended"); 
  
  // while (!Serial.available()); //waits for serial connection to be active
  char buf[128];          //character array the size of fileSize
  file.seek(0);
  if(!file.read(buf,128)){
    Serial.println("Didn't read anything from memory");
  }     //read data from file

  Serial.print("Size of file created (bytes): ");
  Serial.println(file.size());
  Serial.print("Position within file: ");
  Serial.println(file.position());
  Serial.println(buf[0]);
  Serial.println(int(buf[0]));
  Serial.println(int(buf[0] + buf[1]));
  //for (int i=0; i<128000; i+=6){
    //Serial.println(int(buf[i] + buf[i+1]));
  //}
  // Serial.printf("buf:%.*s\n",(int)sizeof(buf),buf);         //serial print data to make sure it is being stored in file
  Serial.println("After buf");
}

void loop() {
//Serial.println("Hello");
delay(1000);
//Serial.println(Variable10);
delay(1000);
}

